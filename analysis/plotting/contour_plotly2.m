% t = linspace(-1, 1.2, 2000);

% saveplotlyconfig('https://plot.ly/~devsullivan','stream-plotly.devsullivan.com', 'private')

%add the workspace 
addpath(genpath('~/plotly'))

%define the minimum number of tasks
min_tasks = 3;

good_numtasks = player_numtasks(~badplayers);
good_avrecall = avplayer_recall(~badplayers);
good_avprecision = avplayer_precision(~badplayers);
good_f1 = avplayer_f1score(~badplayers);
bad_numtasks = player_numtasks(badplayers);
bad_avrecall = avplayer_recall(badplayers);
bad_avprecision = avplayer_precision(badplayers);
bad_f1 = avplayer_f1score(badplayers);
invalid = good_numtasks<=min_tasks;
% invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
%x = log10(good_numtasks);
x = good_avprecision;
x(invalid) = [];
%y = good_f1;
y = good_avrecall;
y(invalid) = [];

traceplayers = struct(...
'x', avplayer_precision, ...
'y', avplayer_recall, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(50,50,50)', ...
'size', 1, ...
'opacity', 0.4), ...
'type', 'scatter');
histxplayers = struct(...
'x', avplayer_precision, ...
'name', 'x density', ...
'marker', struct('color', 'rgb(50,50,50)'), ...
'yaxis', 'y2', ...
'type', 'histogram');
histyplayers = struct(...
'y', avplayer_recall, ...
'name', 'y density', ...
'marker', struct('color', 'rgb(50,50,50)'), ...
'xaxis', 'x2', ...
'type', 'histogram');


tracegood = struct(...
'x', x, ...
'y', y, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(102,0,0)', ...
'size', 1, ...
'opacity', 0.4), ...
'type', 'scatter');


invalid_bad = bad_numtasks<=min_tasks;
% invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
%xbad = log10(bad_numtasks);
xbad = bad_avprecision;
xbad(invalid_bad) = [];
% ybad = bad_f1;
ybad = bad_avrecall;
ybad(invalid_bad) = [];
tracebad = struct(...
'x', xbad, ...
'y', ybad, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(0,0,102)', ...
'size', 2, ...
'opacity', 0.4), ...
'type', 'scatter');

%%expert_average ignoring classes they did not see (mean-estimate)
expert_average = struct(...
'x',expert_precision,...
'y',expert_recall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(0,102,0)',...
'size','20',...
'opacity',0.5),...
'text',{{'Experts'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','right',...
'type','scatter');

%%expert average worst case (non-seen classes = 0) 
% expert2_average = struct(...
% 'x',expert2_precision,...
% 'y',expert2_recall,...
% 'mode','markers+text',...
% 'name','consensus',...
% 'marker',struct(...
% 'color','rgb(102,102,0)',...
% 'size','20',...
% 'opacity',0.5),...
% 'text',{{'Experts'}},...
% 'textfont', struct(...
%     'family', 'sans serif', ...
%     'size', 18),...
% 'textposition','right',...
% 'type','scatter');

%%gamer average when using binary model on pvalues
% binmodel_average = struct(...
% 'x',binmodel_precision,...
% 'y',binmodel_recall,...
% 'mode','markers+text',...
% 'name','consensus',...
% 'marker',struct(...
% 'color','rgb(50,50,50)',...
% 'size','20',...
% 'opacity',0.5),...
% 'text',{{'Binary knn'}},...
% 'textfont', struct(...
%     'family', 'sans serif', ...
%     'size', 18),...
% 'textposition','top',...
% 'type','scatter');


%%gamer average after tuning cutoffs 
consensus_average = struct(...
'x',consensus_precision,...
'y',consensus_recall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(0,0,102)',...
'size','20',...
'opacity',0.5),...
'text',{{'Consensus'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','left',...
'type','scatter');

%%gamer average before tuning cutoffs 
no_tune_average = struct(...
'x',notune_precision,...
'y',notune_recall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(0,102,102)',...
'size','20',...
'opacity',0.5),...
'text',{{'Consensus (raw)'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','left',...
'type','scatter');

%%dnn results 
dnn_average = struct(...
'x',dnn_precision,...
'y',dnn_recall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(102,0,102)',...
'size','20',...
'opacity',0.5),...
'text',{{'DNN'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','right',...
'type','scatter');

%%dnn + gamer results 
tl_average = struct(...
'x',TL_Precision,...
'y',TL_Recall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(102,102,102)',...
'size','20',...
'opacity',0.5),...
'text',{{'GA Loc-CAT'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','left',...
'type','scatter');


%%dnn + false gamer results 
tl_pseudoaverage = struct(...
'x',TL_pseudoPrecision,...
'y',TL_pseudoRecall,...
'mode','markers+text',...
'name','consensus',...
'marker',struct(...
'color','rgb(102,102,0)',...
'size','20',...
'opacity',0.5),...
'text',{{'Loc-CAT'}},...
'textfont', struct(...
    'family', 'sans serif', ...
    'size', 18),...
'textposition','right',...
'type','scatter');


%%contour plot for included players 
contour2d = struct(...
'x', x, ...
'y', y, ...
'name', 'density', ...
'ncontours', 20, ...
'colorscale', 'Hot', ...
'reversescale', true, ...
'showscale', false, ...
'opacity',0.7,...
'type', 'histogram2dcontour');

%contour plot for all data including "bad" players
contourall = struct(...
'x', avplayer_precision, ...
'y', avplayer_recall, ...
'name', 'density', ...
'ncontours', 20, ...
'colorscale', 'Greys', ...
'reversescale', true, ...
'showscale', false, ...
'opacity',0.9,...
'type', 'histogram2dcontour');

%%population histograms
histx = struct(...
'x', x, ...
'name', 'x density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'yaxis', 'y2', ...
'type', 'histogram');
histy = struct(...
'y', y, ...
'name', 'y density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'xaxis', 'x2', ...
'type', 'histogram');

%%define layout
layout = struct(...
'showlegend', false, ...
'mode','markers+text',...
'autosize', false, ...
'width', 600, ...
'height', 550, ...
'xaxis', struct(...
'domain', [0, 0.85], ...
'range',[-0.05,1.05],...
'showgrid', false, ...
'zeroline', false), ...
'yaxis', struct(...
'domain', [0, 0.85], ...
'range',[-0.05,1.05],...
'showgrid', false, ...
'zeroline', false), ...
'margin', struct('t', 50), ...
'hovermode', 'closest', ...
'bargap', 0, ...
'xaxis2', struct(...
'domain', [0.85, 1], ...
'showgrid', false, ...
'zeroline', false), ...
'yaxis2', struct(...
'domain', [0.85, 1], ...
'showgrid', false, ...
'zeroline', false));



%make the plots in stages 
% %%Stage 0
% data = {traceplayers,contourall, histxplayers,histyplayers};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-0', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{1} = response.url;
% % %%Stage 1
% data = {tracegood,contour2d, histx, histy};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-1', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{2} = response.url;
% %%Stage 2 
% data = {tracegood,contour2d, histx, histy,expert_average};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-2', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{3} = response.url;
% %%Stage 3
% data = {tracegood,contour2d, histx, histy,expert_average,no_tune_average};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-3', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{4} = response.url;
% %%Stage 4
% data = {tracegood,contour2d, histx, histy,expert_average,no_tune_average,consensus_average};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-4', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{5} = response.url;
% %%Stage 5
% data = {tracegood,contour2d, histx, histy,expert_average,no_tune_average,consensus_average,dnn_average};
% response = plotly(data, struct('layout', layout, 'filename', 'stage-5', 'world_readable', true, 'fileopt', 'overwrite'));
% plot_url{6} = response.url;
%%Stage 6 -- add binmodel
data = {tracegood,contour2d, histx, histy,expert_average,no_tune_average,consensus_average,dnn_average,tl_average,tl_pseudoaverage};
response = plotly(data, struct('layout', layout, 'filename', 'stage-6', 'world_readable', true, 'fileopt', 'overwrite'));
%figure = getplotlyfig('dpsulliv', 14);
%saveplotlyfig(data, 'test.png')
%saveplotlyfig(figure,'filename','test.png','scale',3);
plot_url{6} = response.url;
response.url
