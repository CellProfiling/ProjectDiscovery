function player_performance(input_path)
% t = linspace(-1, 1.2, 2000);
load(input_path)

%add the workspace 
addpath(genpath('~/plotly'))

%define the minimum number of tasks
min_tasks = 10;

%take the log10 for visualization
player_numtasks = log10(player_numtasks);
min_tasks = log10(min_tasks);

good_numtasks = player_numtasks(~badplayers);
good_avrecall = avplayer_recall(~badplayers);
good_avprecision = avplayer_precision(~badplayers);
% good_hamming = player_meanHamming(~badplayers);
bad_numtasks = player_numtasks(badplayers);
% bad_hamming = player_meanHamming(badplayers);
bad_avf1 = avplayer_f1score(badplayers);
% invalid = good_numtasks<=min_tasks;
invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
%x = log10(good_numtasks);
%x = good_avprecision;
x = player_numtasks;%good_numtasks;
x(invalid) = [];
%y = good_hamming;
y = avplayer_f1score;%player_meanHamming;%good_avrecall;
y(invalid) = [];
y(isnan(y)) = 0;
tracegood = struct(...
'x', x, ...
'y', y, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(102,0,0)', ...
'size', 1, ...
'opacity', 0.5), ...
'type', 'scatter');
%'color', 'rgb(50,50,50)', ...

invalid_bad = bad_numtasks<=min_tasks;
% invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
xbad = bad_numtasks;%log10(bad_numtasks);
xbad(invalid_bad) = [];
ybad = bad_avf1;%bad_hamming;
ybad(invalid_bad) = [];
ybad(isnan(ybad)) = [];
tracebad = struct(...
'x', xbad, ...
'y', ybad, ...
'mode', 'markers', ...
'name', 'box', ...
'marker', struct(...
'color', 'rgb(50,50,50)', ...
'size', 1.3, ...
'opacity', 0.6), ...
'type', 'scatter');

consensus = struct(...
'y',linspace(0,9000),...
'x',repmat(0.55,1,100),...
'name','consensus',...
'marker',struct(...
'color','rgb(0,0,102)',...
'LineWidth',15,...
'opacity',0.5),...
'type','line');

mean_player = struct(...
'x',linspace(min_tasks,max(x)),...
'y',repmat(mean(y),1,100),...
'name','consensus',...
'marker',struct(...
'color','rgb(0,0,0)',...
'size','2',...
'opacity',1),...
'type','line');

mean_badplayer = struct(...
'x',linspace(min_tasks,max(x)),...
'y',repmat(mean(ybad),1,100),...
'name','consensus',...
'marker',struct(...
'color','rgb(200,0,0)',...
'size','2',...
'opacity',0.7),...
'type','line');


trace_bar = struct(...
'x', y, ...
'showscale', false, ...
'marker', struct('color','rgb(150,150,150)'),...
'opacity',1,...
'nbinsx',20,...
'type', 'histogram');
tracebad_bar = struct(...
'x', ybad, ...
'marker',struct('color','rgb(102,0,0)'),...
'showscale', false, ...
'nbinsx',20,...
'opacity',1,...
'type', 'histogram');
% 'colorscale', {{{0, 'rgb(1.0, 1.0, 1.0)'},...
% {.1, 'rgb(0.050382999999999997, 0.029803, 0.52797499999999997)'},...
% {.2, 'rgb(0.063535999999999995, 0.028426, 0.53312400000000004)'},...
% {.3, 'rgb(0.075353000000000003, 0.027206000000000001, 0.53800700000000001)'},...
% {.4, 'rgb(0.086221999999999993, 0.026124999999999999, 0.54265799999999997)'},...
% {.5, 'rgb(0.096379000000000006, 0.025165, 0.54710300000000001)'},...
% {.6, 'rgb(0.10598, 0.024309000000000001, 0.55136799999999997)'},...
% {.7, 'rgb(0.115124, 0.023556000000000001, 0.55546799999999996)'},...
% {.8, 'rgb(0.123903, 0.022877999999999999, 0.559423)'},...
% {.9, 'rgb(0.132381, 0.022258, 0.56325000000000003)'},...
% {1.0, 'rgb(0., 0.021687000000000001, 0.56695899999999999)'}}}
trace3 = struct(...
'x', x, ...
'name', 'x density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'yaxis', 'y2', ...
'type', 'histogram');
trace4 = struct(...
'y', y, ...
'name', 'y density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'xaxis', 'x2', ...
'type', 'histogram');
%data = {trace1, tracegood, tracebad, trace_contour};%, trace3, trace4};
data = {trace_bar,tracebad_bar,consensus};%, trace3, trace4};

% data = {trace2, trace3, trace4};
layout = struct(...
'showlegend', false, ...
'autosize', false, ...
'width', 600, ...
'height', 550, ...
'xaxis', struct(...
'domain', [0, 1], ...
'showgrid', false, ...
'zeroline', false), ...
'yaxis', struct(...
'domain', [0, 1], ...
'showgrid', false, ...
'zeroline', false), ...
'margin', struct('t', 50), ...
'hovermode', 'closest', ...
'bargap',0.15,...
'bargroupgap',0.1,...
'barmode','stack');
response = plotly(data, struct('layout', layout, 'filename', '2dhistogram-contour-subplots', 'fileopt', 'overwrite'));
response.url
url_parts = strsplit(response.url,'/');
%figure = getplotlyfig('dpsulliv', str2num(url_parts{end}));
%saveplotlyfig(figure,'filename','test_2.png','scale',3);

plot_url = response.url