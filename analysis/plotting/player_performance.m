function player_performance(input_path)
% t = linspace(-1, 1.2, 2000);
load(input_path)

%add the workspace 
addpath(genpath('~/plotly'))

%define the minimum number of tasks
min_tasks = 10;

%take the log10 for visualization
player_numtasks = log10(player_numtasks);
min_tasks = log10(min_tasks);

good_numtasks = player_numtasks(~badplayers);
good_avrecall = avplayer_recall(~badplayers);
good_avprecision = avplayer_precision(~badplayers);
% good_hamming = player_meanHamming(~badplayers);
bad_numtasks = player_numtasks(badplayers);
% bad_hamming = player_meanHamming(badplayers);
bad_avf1 = avplayer_f1score(badplayers);
% invalid = good_numtasks<=min_tasks;
invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
%x = log10(good_numtasks);
%x = good_avprecision;
x = player_numtasks;%good_numtasks;
x(invalid) = [];
%y = good_hamming;
y = avplayer_f1score;%player_meanHamming;%good_avrecall;
y(invalid) = [];
tracegood = struct(...
'x', x, ...
'y', y, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(50,50,50)', ...
'size', 1, ...
'opacity', 0.4), ...
'type', 'scatter');


invalid_bad = bad_numtasks<=min_tasks;
% invalid = player_numtasks<=min_tasks;
%x = log10(player_numtasks);
xbad = bad_numtasks;%log10(bad_numtasks);
xbad(invalid_bad) = [];
ybad = bad_avf1;%bad_hamming;
ybad(invalid_bad) = [];
tracebad = struct(...
'x', xbad, ...
'y', ybad, ...
'mode', 'markers', ...
'name', 'points', ...
'marker', struct(...
'color', 'rgb(0,0,102)', ...
'size', 2, ...
'opacity', 0.4), ...
'type', 'scatter');

trace1 = struct(...
'x',linspace(min_tasks,max(x)),...
'y',repmat(0.53,1,100),...
'name','consensus',...
'marker',struct(...
'color','rgb(0,0,102)',...
'size','2',...
'opacity',1),...
'type','line');
trace2 = struct(...
'x', x, ...
'y', y, ...
'name', 'density', ...
'ncontours', 20, ...
'colorscale', 'Hot', ...
'reversescale', true, ...
'showscale', false, ...
'opacity',0.7,...
'type', 'histogram2dcontour');
trace3 = struct(...
'x', x, ...
'name', 'x density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'yaxis', 'y2', ...
'type', 'histogram');
trace4 = struct(...
'y', y, ...
'name', 'y density', ...
'marker', struct('color', 'rgb(102,0,0)'), ...
'xaxis', 'x2', ...
'type', 'histogram');
data = {tracegood, tracebad, trace1, trace2};%, trace3, trace4};
% data = {trace2, trace3, trace4};
layout = struct(...
'showlegend', false, ...
'autosize', false, ...
'width', 600, ...
'height', 550, ...
'xaxis', struct(...
'domain', [0, 1], ...
'showgrid', false, ...
'zeroline', false), ...
'yaxis', struct(...
'domain', [0, 1], ...
'showgrid', false, ...
'zeroline', false), ...
'margin', struct('t', 50), ...
'hovermode', 'closest', ...
'bargap', 0);
response = plotly(data, struct('layout', layout, 'filename', '2dhistogram-contour-subplots', 'fileopt', 'overwrite'));
response.url
url_parts = strsplit(response.url,'/');
%figure = getplotlyfig('dpsulliv', str2num(url_parts{end}));
%saveplotlyfig(figure,'filename','test_2.png','scale',3);

plot_url = response.url